###############################################
### Analise dos dados de sapos urbanos ########
### Dissertacao do Paulo Mateus Cruz Santos ###
###############################################

# Define a area de trabalho
#setwd("C:/Users/carla/OneDrive/Documentos/diagrama_rosas_Paulo")

# Limpa a area de trabalho
remove(list = ls())

# Desabilita a notacao cientifica
options(scipen = 999)

# Garante a obtencao dos mesmos resultados toda vez que o codigo for rodado
set.seed(2092270023) # valor obtido com o comando "sample(.Machine$integer.max, 1)"

# Carrega os pacotes
library(vegan)
library(stringr)
library(stringi)
library(plyr)
library(ggplot2)
library(rgdal)
library(rgeos)
library(raster)
library(iNEXT)
library(readxl)
library(janitor)


############################################
### IMPORTA OS DADOS BRUTOS DAS ESPECIES ###
############################################

# Adenomera andreae
A_andreae = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_andreae_ALL.csv")

# Allobates femoralis
A_femoralis = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_femoralis_ALL.csv")

# Ameerega hahneli (vazio)
A_hahneli = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_hahneli_ALL2.csv")

# Adenomera hylaedactyla
A_hylaedactyla = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_hylaedactyla___.csv")

# Amazophrynella manaos
A_manaos = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_manaos_ALL.csv")
A_manaos$species[A_manaos$species == "Amazophrynella minuta"] = "Amazophrynella manaos" # atualiza o nome da especie

# Allobates paleovarzensis
A_paleovarzensis = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_paleovarzensis_ALL__.csv")

# Atelopus spumarius
A_spumarius = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_spumarius_ALL.csv")

# Anomaloglossus stepheni
A_stepheni = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_stepheni.csv")

# Allobates sumtuosus
A_sumtuosus = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_sumtuosus_ALL_7.csv")

# Ameerega trivittata
A_trivittata = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_trivittata_ALL.csv")

# Chiasmocleis shudikarensis
C_shudikarensis = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/C_shudikarensis_ALL_.csv")

# Dendropsophus minutus
D_minutus = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/D_minutus_ALL.csv")

# Elachistocleis bicolor
E_bicolor = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/E_bicolor_ALL.csv")

# Leptodactylus petersii
L_petersii = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/L_petersii_ALL.csv")

# Leptodactylus stenodema
L_stenodema = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/L_stenodema_ALL_teste.csv")

# Pristimantis fenestratus
P_fenestratus = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/P_fenestratus_ALL.csv")

# Rhinella proboscidea
R_proboscidea = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/R_proboscidea_ALL____.csv")

# Synapturanus mirandaribeiroi
S_mirandaribeiroi = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/S_mirandaribeiroi_m1.csv")

# Synapturanus salseri
S_salseri = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/S_salseri_ALL.csv")

# JUNTA OS DADOS BRUTOS DAS ESPECIES
# Ameerega hahneli nao aparece, porque nao foi detectada pelo Pattern Matching (Arbimon)
frogs_raw = rbind(A_andreae,
                  A_femoralis,
                  A_hahneli,
                  A_hylaedactyla,
                  A_manaos,
                  A_paleovarzensis,
                  A_spumarius,
                  A_stepheni,
                  A_sumtuosus,
                  A_trivittata,
                  C_shudikarensis,
                  D_minutus,
                  E_bicolor,
                  L_petersii,
                  L_stenodema,
                  P_fenestratus,
                  R_proboscidea,
                  S_mirandaribeiroi,
                  S_salseri)

# Das 19 especies investigadas, 18 foram detectadas pelo Pattern Matching (Arbimon)
sort(unique(frogs_raw$species))

# Das 18 especies detectadas pelo Pattern Matching (Arbimon), 13 foram validadas (TRUE POSITIVES)
sort(unique(subset(frogs_raw, validated == "present")$species))

# O nome de todas as especies esta correto, conforme a lista de Frost (2023-04-06)
# https://amphibiansoftheworld.amnh.org/content/search?subtree=&subtree_id=&country%5B%5D=194&search_type=count

# Cria uma coluna em que cada linha eh um registro de ocorrencia
frogs_raw$occurrence = 1
frogs_raw$occurrence[frogs_raw$validated != "present"] = 0

# Mantem apenas as deteccoes validadas
frogs_validated = subset(frogs_raw, validated == "present")

# Remove as deteccoes duplicadas e mantem apenas as colunas relevantes
# Deteccoes duplicadas sao aquelas com mais de um registro da mesma especie na mesma gravacao
# Segundo a dissertacao do Paulo, a mesma gravacao poderia ter ate tres registros da mesma especie
# O comando abaixo deixa apenas um registro de cada especie por gravacao
frogs_validated = unique(frogs_validated[, c("recording",
                                             "site",
                                             "species")])

# Cria uma coluna em que cada linha eh um registro de ocorrencia
frogs_validated$occurrence = 1


######################################
### IMPORTA OS DADOS DAS GRAVACOES ###
######################################

# Importa a lista de arquivos de gravacao da playlist "TUDO"
recordings = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/export-recording.csv")

# Substitui ano com 2 digitos para ano com 4 digitos
recordings$year = as.numeric(paste0(20, recordings$year))

# Adiciona o dia Juliano
recordings$julian_day = format(as.Date(gsub("/", "-", recordings$date)), "%j") 

# Remove a coluna "date"
recordings$date = NULL

# Reordena as colunas
recordings = recordings[, c(1, 2, 5, 4, 3, 6)]

# Mantem apenas as colunas relevantes
recordings_raref = recordings[, c("filename",
                                  "site")]
# Renomeia a coluna "filename"
colnames(recordings_raref)[1] = "recording"

# Adiciona uma especie "dummy"
# A inclusao dessa "especie" vai permitir a construcao das matrizes de analise de rarefacao
# A ideia eh manter o esforco amostral - i.e. todas as gravacoes de cada sitio
# Apos a construcao das matrizes de analise de rarefacao, a especie "dummy" sera removida
recordings_raref$species = "dummy"

# Cria uma coluna em que cada linha eh um registro de ocorrencia da especie "dummy"
recordings_raref$occurrence = 1


###############################################
### RIQUEZA RAREFEITA DE ESPECIES POR SITIO ###
###############################################

# Combina os dados das especies com os dados de esforco (gravacoes)
data_raref = rbind(frogs_validated,
                   recordings_raref)

# Determina a relacao de sitios para analisar
sitios_raref = sort(unique(data_raref$site))

# Cria uma matriz de incidencia de especie por gravacao para cada sitio
raref_list = list()

for (i in 1:length(sitios_raref)) {
  
  # Seleciona apenas um dos sitios
  raref_site = subset(data_raref, site == sitios_raref[i])
  
  # Cria uma matriz de incidencia de especies por gravacao
  raref_df = as.data.frame(tapply(raref_site$occurrence,
                                  list(raref_site$species,
                                       raref_site$recording),
                                  sum))
  
  # Converte NA em zero
  raref_df[is.na(raref_df)] = 0
  
  # Remove a especie dummy
  raref_df = raref_df[-which(rownames(raref_df) == "dummy"), ]
  
  # Salva o resultado na lista
  raref_list[[i]] = raref_df
  
  print(i)
  
}

# Da nome aos sitios da lista
names(raref_list) = sitios_raref

# Remove os sitios com zero especies da lista
raref_list = raref_list[-which(unlist(lapply(raref_list, nrow)) == 0)]

# Realiza as analises de rarefacao padronizadas por amostras (numero de gravacoes)
# O numero de gravacoes utilizado foi o dobro (2198) do sitio (MC_2_B) com o menor numero de gravacoes (1099)
raref_D = estimateD(raref_list,
                    q = 0,
                    datatype = "incidence_raw",
                    base = "size",
                    level = NULL,
                    nboot = 1000,
                    conf = 0.95)


###################################
### IMPORTA OS DADOS DOS SITIOS ###
###################################

# Observacao sobre alguns sitios
# MA_11 e RPE_5_B nao entraram na playlist denominada "TUDO"
# IT_6_B e MA_5_C tiveram zero gravacoes
# MA_5_B, MA_5_C, RPE_5_B e IT_7_B nao possuem variaveis locais

# Sitios (conforme Arbimon)
sites = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/sites-export.csv")

# Remove alguns sitios
sites = sites[-which(sites$Name == "Fonte"), ]
sites = sites[-which(sites$Name == "frogs"), ]

#sites = sites[-which(sites$Name == "MA_11"), ]
#sites = sites[-which(sites$Name == "RPE_5_B"), ]
#sites = sites[-which(sites$Name == "IT_6_B"), ]
#sites = sites[-which(sites$Name == "MA_5_C"), ]
#sites = sites[-which(sites$Name == "MA_5_B"), ]
#sites = sites[-which(sites$Name == "IT_7_B"), ]

# Renumera as linhas
rownames(sites) = NULL

# Adiciona o esforco amostral (i.e. numeros de gravacoes) por sitio
effort = data.frame(table(recordings$site))
sites$Recordings_Playlist = effort$Freq[match(sites$Name, effort$Var1)]

# Constroi a matriz de sitios por especies
comm = as.data.frame(tapply(frogs_raw$occurrence,
                            list(frogs_raw$site, frogs_raw$species),
                            sum))

# Transforma NA em zero
comm[is.na(comm)] = 0

# Calcula a riqueza observada de especies por sitios
richness = rowSums(ifelse(comm > 0, 1, 0))

# Adiciona a riqueza de observada de especies ao objeto "sites"
sites$Richness_Observed = richness[match(sites$Name,
                                         names(richness))]

# Adiciona a riqueza rarefeita de especies
sites$Richness_Rarefied = raref_D$qD[match(sites$Name,
                                           raref_D$Assemblage)]


#############################################
### IMPORTA OS DADOS DAS VARIAVEIS LOCAIS ###
#############################################

######################
### TRONCOS CAIDOS ###
### SERRAPILHEIRA ####
######################

# Troncos caidos e serrapilheira
troncos = as.data.frame(read_xlsx("G:/My Drive/Pesquisa/Parcerias/Paulo Mateus/Serapilheira e troncos caídos.xlsx", sheet = 1))

# Remove linhas e colunas em branco
troncos = remove_empty(troncos, quiet = FALSE)

# Remove as linhas sem dados (NA)
troncos = na.omit(troncos)

# Remove as colunas das medias
troncos$...9 = NULL
troncos$...17 = NULL

# Renumera as linhas
rownames(troncos) = NULL

# Renomeia as colunas
colnames(troncos) = c("Site_Number",
                      "Site_Name",
                      "Logs_0-50_m", "Logs_50-100_m",
                      "Logs_100-150_m", "Logs_150-200_m",
                      "Logs_200-250_m", "Logs_250-300_m",
                      "Litter_cm_0-50_m", "Litter_cm_50-100_m",
                      "Litter_cm_100-150_m", "Litter_cm_150-200_m",
                      "Litter_cm_200-250_m", "Litter_cm_250-300_m")

# Remove a casa decimal do numero do sitio
troncos$Site_Number = gsub("\\.0", "", troncos$Site_Number)

# Converter os valores de troncos caidos e serrapilheira em numeric
troncos[, 3:14] = apply(troncos[, 3:14], 2, as.numeric)


##############
### DOSSEL ###
##############

# Importa os dados de cobertura e fechamento do dossel
dossel = as.data.frame(read_xlsx("G:/My Drive/Pesquisa/Parcerias/Paulo Mateus/Cobertura de Dossel.xlsx", sheet = 1))

# Remove as colunas em branco
dossel$...9 =  NULL
dossel$...10 = NULL

# Remove as colunas das medias
dossel$MÉDIA...8 = NULL
dossel$MÉDIA...18 = NULL

# Remove as colunas com o nome da cidade
dossel$CIDADE...1 = NULL
dossel$CIDADE...11 = NULL

# Remove a coluna repetida com o numero do sitio
dossel$SÍTIO...12 = NULL

# Renomeia as colunas
colnames(dossel) = c("Site_Number",
                     "Canopy_Cover_50_m", "Canopy_Cover_100_m",
                     "Canopy_Cover_150_m", "Canopy_Cover_200_m",
                     "Canopy_Cover_250_m",
                     "Canopy_Closure_50_m", "Canopy_Closure_100_m",
                     "Canopy_Closure_150_m", "Canopy_Closure_200_m",
                     "Canopy_Closure_250_m")


##########################
### CODIGOS DOS SITIOS ###
##########################

# Importa a tabela com a correspondencia entre o Site_Number e Name da tabela 'sites'
consolidada = as.data.frame(read_xlsx("G:/My Drive/Pesquisa/Parcerias/Paulo Mateus/Variaveis ambientais tabela consolidada.xlsx", sheet = 1))

# Arruma o numero do sitio localizado na Ducke
# Nos arquivos Serapilheira e troncos caídos.xlsx e Cobertura de Dossel.xlsx
# O numero do sitio na Ducke eh o 25 (correto)
# No arquivo Variaveis ambientais tabela consolidada.xlsx
# O numero do sitio na Ducke eh o 23 (errado)
consolidada$plot[consolidada$plot == 23] = 25

# Adiciona o Name dos sitios
troncos$Name = consolidada$`Point ID`[match(troncos$Site_Number,
                                            consolidada$plot)]

dossel$Name = consolidada$`Point ID`[match(dossel$Site_Number,
                                           consolidada$plot)]


######################
### JUNTA OS DADOS ###
######################

# Merge a tabela sites do Arbimon com as variaveis locais
# Troncos e serrapilheira
sites_var = merge(x = sites, y = troncos, by = "Name",
                  all.x = TRUE, all.y = FALSE, sort = TRUE)

# Cobertura e fechamento do dossel
sites_var = merge(x = sites_var, y = dossel, by = "Site_Number",
                  all.x = TRUE, all.y = FALSE, sort = TRUE)


# Adiciona uma coluna com o codigo da cidade
sites_var$City_Code = word(sites_var$Name.x, 1, sep = "_")

# Remove a coluna Name.y
sites_var$Name.y = NULL

# Adiciona uma coluna com o nome da cidade
sites_var$City_Name = "Iranduba"
sites_var$City_Name[sites_var$City_Code == "IT"] = "Itacoatiara"
sites_var$City_Name[sites_var$City_Code == "MA"] = "Manaus"
sites_var$City_Name[sites_var$City_Code == "MC"] = "Manacapuru"
sites_var$City_Name[sites_var$City_Code == "PF"] = "Presidente_Figueiredo"
sites_var$City_Name[sites_var$City_Code == "RPE"] = "Rio_Preto_da_Eva"

# Renomeia o nome da coluna Name para Site_Code
colnames(sites_var)[colnames(sites_var) == "Name.x"] = "Site_Code"

# Renomeia o nome da coluna Name para Id
colnames(sites_var)[colnames(sites_var) == "Id"] = "Site_Id_Arbimon"

# Remove caracteres especiais da coluna Site_Name
# Substitui espacos por "_" na coluna Site_Name
sites_var$Site_Name = stri_trans_general(sites_var$Site_Name,
                                         "Latin-ASCII")
sites_var$Site_Name = gsub(" ", "_", sites_var$Site_Name)
sites_var$Site_Name = gsub("/", "_", sites_var$Site_Name)

# Substitui "/" por "_" na coluna timezone
sites_var$Timezone = gsub("/", "_", sites_var$Timezone)

# Padroniza o nome das colunas
sites_var = clean_names(sites_var)

# Ordena as colunas
sites_var = sites_var[, c("city_name",
                          "city_code",
                          "site_number",
                          "site_name",
                          "site_code",
                          "site_id_arbimon",
                          "longitude",
                          "latitude",
                          "altitude",
                          "timezone",
                          "recordings_count",
                          "recordings_playlist",
                          "richness_observed",
                          "richness_rarefied",
                          "logs_0_50_m",
                          "logs_50_100_m",
                          "logs_100_150_m",
                          "logs_150_200_m",
                          "logs_200_250_m",
                          "logs_250_300_m",
                          "litter_cm_0_50_m",
                          "litter_cm_50_100_m",
                          "litter_cm_100_150_m",
                          "litter_cm_150_200_m",
                          "litter_cm_200_250_m",
                          "litter_cm_250_300_m",
                          "canopy_cover_50_m",
                          "canopy_cover_100_m",
                          "canopy_cover_150_m",
                          "canopy_cover_200_m",
                          "canopy_cover_250_m",
                          "canopy_closure_50_m",
                          "canopy_closure_100_m",
                          "canopy_closure_150_m",
                          "canopy_closure_200_m",
                          "canopy_closure_250_m")]


####################
### FOREST COVER ###
####################

# Importa o raster da regiao de estudo
# A regiao de estudo abrange os seis municipios amostrados da Regiao Metropolitana de Manaus
# O raster do MapBiomas corresponde a colecao 7.1, ano 2020
mapbiomas = raster("https://raw.githubusercontent.com/buenoas/urban_frogs/main/study_region.tif")

# Binariza o raster do MapBiomas
# Pixel value 3 = floresta (1); demais pixel values = nao-floresta (0)
values(mapbiomas) = ifelse(values(mapbiomas) == 3, 1, 0)

# Transforma as coordenadas dos sitios em um shapefile de pontos
sites_shp = SpatialPointsDataFrame(coords = sites_var[, c("longitude", "latitude")],
                                   data = sites_var,
                                   proj4string = mapbiomas@crs)

# Carrega a funcao "landcover" para calcular a cobertura de floresta para varios tamanhos de buffer
source("https://raw.githubusercontent.com/buenoas/R-functions/main/landcover")

# Calcular a cobertura de floresta para varios tamanhos de buffer
# "3" = floresta
landcover_buffers = list(
  landcover(mapbiomas, sites_shp, 200)[, "1"], # 1 = floresta
  landcover(mapbiomas, sites_shp, 300)[, "1"],
  landcover(mapbiomas, sites_shp, 400)[, "1"],
  landcover(mapbiomas, sites_shp, 500)[, "1"],
  landcover(mapbiomas, sites_shp, 600)[, "1"],
  landcover(mapbiomas, sites_shp, 700)[, "1"],
  landcover(mapbiomas, sites_shp, 800)[, "1"],
  landcover(mapbiomas, sites_shp, 900)[, "1"],
  landcover(mapbiomas, sites_shp, 1000)[, "1"])

# Coloca os valores de cobertura de floresta lado a lado
landcover_buffers = do.call(cbind, landcover_buffers)

# Renomeia as colunas
colnames(landcover_buffers) = paste0("forest_cover_",
                                     seq(200, 1000, 100),
                                     "_m")

# Adiciona o valores de cobertura florestal ao objeto "sites_var"
sites_var = cbind(sites_var, landcover_buffers)


###############################################
### JUNTA AS VARIAVEIS LOCAIS E DE PAISAGEM ###
### COM OS DADOS DE COMPOSICAO DE ESPECIES ####
###############################################

# Produz a matriz de sitios por especie
# O valores nas celulas correspondem ao numero de registros
# 1 registro = 1 deteccao em 1 minuto de gravacao
comm_validated = as.data.frame(
  tapply(frogs_validated$occurrence,
         list(frogs_validated$site, frogs_validated$species),
         sum))

# Converte NA em zero
comm_validated[is.na(comm_validated)] = 0

# Substitui espacoes por "_"
colnames(comm_validated) = gsub(" ", "_", colnames(comm_validated))

# Adiciona uma coluna com o site_Code
comm_validated$site_code = rownames(comm_validated)

# Junta variaveis locais e de paisagem
# com dados de composicao de especies
sites_var_comm = merge(x = sites_var, y = comm_validated, by = "site_code",
                       all.x = TRUE, all.y = FALSE, sort = TRUE)

# Adiciona as espescies detectadas pelo algoritmo,
# mas com zero validacoes humanas (falto-positivos)
sites_var_comm$Allobates_sumtuosus = NA
sites_var_comm$Atelopus_spumarius = NA
sites_var_comm$Chiasmocleis_shudikarensis = NA
sites_var_comm$Dendropsophus_minutus = NA
sites_var_comm$Elachistocleis_bicolor = NA

# Adiciona a especie que nao foi detectada pelo algoritmo
sites_var_comm$Ameerega_hahneli = NA

write.csv(sites_var_comm, "sites_var_comm.csv", row.names = FALSE)







##############################################
### REVISAR A NECESSIDADE DO CODIGO ABAIXO ###
##############################################

# Importa o raster do MapBiomas de 2017 (colecao 7)
mapbiomas_2017 = raster("C:\\Users\\Anderson\\Downloads\\brasil_coverage_2017.tif")

# Corta o raster para area de estudo (seis municipios)
mapbiomas_2017 = crop(mapbiomas_2017, mapbiomas)

# Binariza o raster
values(mapbiomas_2017) = ifelse(values(mapbiomas_2017) == 3, 1, 0)

# Calcular a cobertura de floresta para varios tamanhos de buffer
# "3" = floresta
landcover_buffers_2017 = list(
  landcover(mapbiomas_2017, sites_shp, 50)[, "1"], # 1 = floresta
  landcover(mapbiomas_2017, sites_shp, 100)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 150)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 200)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 250)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 300)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 350)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 400)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 450)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 500)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 550)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 600)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 650)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 700)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 750)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 800)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 850)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 900)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 950)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 1000)[, "1"])

# Coloca os valores de cobertura de floresta lado a lado
landcover_buffers_2017 = do.call(cbind, landcover_buffers_2017)

# Renomeia as colunas
colnames(landcover_buffers_2017) = paste0("Forest_cover_",
                                          seq(50, 1000, 50),
                                          "_m")

for (i in 1:20) {
  plot(landcover_buffers[, i], landcover_buffers_2017[, i],
       main = paste0(colnames(landcover_buffers_2017)[i],
                     "\nr = ", round(cor(landcover_buffers[, i], landcover_buffers_2017[, i]), 2)))
  
}

landcover_2017_2020 = list()

for (i in 1:ncol(landcover_buffers)) {
  
  landcover_2017_2020[[i]] = data.frame(
    buffer_size = colnames(landcover_buffers)[i],
    site = sites$Name,
    mapbiomas_2020 = landcover_buffers[, i],
    mapbiomas_2017 = landcover_buffers_2017[, i],
    difference = landcover_buffers[, i] - landcover_buffers_2017[, i],
    pearson_correlation = cor(landcover_buffers[, i], landcover_buffers_2017[, i]))
  
  print(i)
  
}

landcover_2017_2020 = do.call(rbind, landcover_2017_2020)



#########################
### ANALISE DOS DADOS ###
#########################

# Cria uma matriz de abundancia de sitios x especies
df_ab = as.data.frame(
  tapply(frogs_validated$occurrence,
         list(frogs_validated$site, frogs_validated$species),
         sum))

# Converte NA em zero
df_ab[is.na(df_ab)] = 0

# Faz uma analise de ordenacao multivariada (PCoA)
# Padroniza os dados
frogs.std = df_ab/rowSums(df_ab) # dados de abundancia relativa
#frogs.std = decostand(df_ab, method = "pa") # dados de presence-absencia

# Calcula a distancia de Bray-Curtis entre os sitios
bray = vegdist(frogs.std, method = "bray")

# PCoA
pcoa = cmdscale(bray, k = 2, eig = TRUE, add = TRUE)

# Extrai os valores dos 2 primeiros eixos da PCoA
positions = as.data.frame(pcoa$points)

# Renomeia as colunas
colnames(positions) = c("PCo1", "PCo2")

# Adiciona o codigo do municipio
positions$city_code = word(rownames(positions), 1, sep = "_")

# Adiciona o nome do municipio
positions$city_name = positions$city_code
positions$city_name[positions$city_name == "IR"] = "Iranduba"
positions$city_name[positions$city_name == "IT"] = "Itacoatiara"
positions$city_name[positions$city_name == "MC"] = "Manacapuru"
positions$city_name[positions$city_name == "MA"] = "Manaus"
positions$city_name[positions$city_name == "PF"] = "Presidente Figueiredo"
positions$city_name[positions$city_name == "RPE"] = "Rio Preto da Eva"

# Porcentagem de explicacao dos eixos
percentage_explained = 100 * pcoa$eig / sum(pcoa$eig)

# Poligonos do grafico
find_hull = function(positions) positions[chull(positions$PCo1, positions$PCo2), ]
hulls = ddply(positions, "city_name", find_hull)

# Produz o grafico com os 2 primeiros eixos da PCoA
gg_pcoa = 
  
  ggplot(data = positions[order(positions$PCo1, positions$PCo2), ],
         aes(x = PCo1, y = PCo2,
             colour = city_name, fill = city_name)) + 
  
  labs(x = paste0("PCo 1 ", "(", round(percentage_explained[1]), "%)"),
       y = paste0("PCo 2 ", "(", round(percentage_explained[2]), "%)"),
       colour = NULL,
       fill = NULL,
       title = "Diurnal frogs in six Amazonian cities",
       subtitle = "Passive acoustic monitoring data") +
  
  scale_colour_brewer(type = "qual", palette = "Set1") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  
  geom_polygon(data = hulls, aes(colour = NULL),
               alpha = 0.2, show.legend = FALSE) +
  
  geom_point(size = 4, shape = 21, colour = "black", alpha = 0.6) +
  
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks = element_line(colour = "black"),
        axis.line = element_line(colour = "black"),
        legend.position = "bottom")

# Visualiza o grafico
gg_pcoa

# Salva o grafico
#ggsave(gg_pcoa, filename = "pcoa.png", dpi = 600,
#       width = 15, height = 15, units = "cm")


# Grafico da ocorrencia das especies nos sitios
# Prepara os dados
# Numero de sitios ocupados por cada especies
sites_occ = data.frame(
  freq = sort(colSums(ifelse(df_ab > 0, 1, 0))))

# Ordena as especies com base no numero de sitios ocupados
sites_occ$species = factor(rownames(sites_occ),
                           levels = rownames(sites_occ))

# Remove o nome das linhas
rownames(sites_occ) = NULL

# Reordena as colunas
sites_occ = sites_occ[, 2:1]

# Produz o grafico
gg_occ = 
  
  ggplot(data = sites_occ,
         aes(x = freq/36 * 100, y = species)) + 
  
  labs(x = "Site occurrence (%)",
       y = NULL,
       title = "Diurnal frogs distribution in 36 sites",
       subtitle = "Passive acoustic monitoring data") +
  
  geom_col(fill = "darkgreen", width = 0.8) + 
  
  theme_minimal(base_size = 12) +
  theme(axis.title.x = element_text(colour = "black"),
        axis.text.x = element_text(colour = "black"),
        axis.text.y = element_text(colour = "black", face = "italic"),
        axis.ticks = element_blank())

# Visualiza o grafico
gg_occ

# Salva o grafico
#ggsave(gg_occ, filename = "occurrence.jpg", dpi = 600,
#       width = 20, height = 15, units = "cm")


# Grafico da frequencia de incidencia por horario do dia para cada especie
# Prepara os dados
freq_hour = as.data.frame(tapply(frogs_validated$occurrence,
                                 list(frogs_validated$hour, frogs_validated$species),
                                 sum))

# Converte NA em zero
freq_hour[is.na(freq_hour)] = 0

# Converte registros em proporcao
freq_hour_prop = as.data.frame(apply(freq_hour, 2, function(x) x/sum(x)) * 100)

for (i in 1:ncol(freq_hour_prop)) {
  
  # Prepara os dados para produzir o grafico (diagrama de rosa)
  dat = data.frame(freq = freq_hour_prop[, i], hour = 0:23)
  
  rosa = 
    
    ggplot(data = dat,
           aes(x = hour, y = freq/sum(freq) * 100)) +
    
    ggtitle(bquote(atop(italic(.(names(freq_hour_prop)[i])),
                        "(n ="~.(paste(sum(freq_hour[, i])))*")"))) +
    
    labs(x = "Time (1-hour block)") +
    
    lims(y = c(0, max(dat$freq))) +
    
    scale_x_continuous(breaks = 0:23) +
    
    geom_bar(stat = "identity") +
    
    geom_rect(aes(xmin = -Inf, xmax = 7, ymin = -Inf, ymax = Inf), fill = "#CFCFDB") + # noite
    geom_rect(aes(xmin = 6, xmax = 18, ymin = -Inf, ymax = Inf), fill = "#FFF6C7") + # dia
    geom_rect(aes(xmin = 18, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "#CFCFDB") + # noite
    
    #geom_rect(aes(xmin = 6, xmax = 8, ymin = -Inf, ymax = Inf), fill = "#FAFBBD") + # dawn
    #geom_rect(aes(xmin = 8, xmax = 18, ymin = -Inf, ymax = Inf), fill = "#FDE050") + # day
    #geom_rect(aes(xmin = 18, xmax = 20, ymin = -Inf, ymax = Inf), fill = "#5995B7") + # dusk
    #geom_rect(aes(xmin = 20, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "#16498A") + # night
    #geom_rect(aes(xmin = -Inf, xmax = 6, ymin = -Inf, ymax = Inf), fill = "#16498A") + # night
    
    geom_vline(xintercept = seq(0, 23, 1),
               colour = "black", linetype = "dashed", size = 0.25, alpha = 0.25) + # "#EBEBEB" cinza
    
    geom_bar(stat = "identity", fill = "black", colour = "white", size = 0.2) +
    
    geom_hline(yintercept = seq(0, 90, 10),
               colour = "black", linetype = "dashed", size = 0.25, alpha = 0.25) +
    
    annotate(geom = "label", x = 12, y = 10, size = 2.25, label = 0.1, fill = "white") +
    annotate(geom = "label", x = 12, y = 20, size = 2.25, label = 0.2, fill = "white") +
    annotate(geom = "label", x = 12, y = 30, size = 2.25, label = 0.3, fill = "white") +
    annotate(geom = "label", x = 12, y = 40, size = 2.25, label = 0.4, fill = "white") +
    annotate(geom = "label", x = 12, y = 50, size = 2.25, label = 0.5, fill = "white") +
    annotate(geom = "label", x = 12, y = 60, size = 2.25, label = 0.6, fill = "white") +
    annotate(geom = "label", x = 12, y = 70, size = 2.25, label = 0.7, fill = "white") +
    annotate(geom = "label", x = 12, y = 80, size = 2.25, label = 0.8, fill = "white") +
    annotate(geom = "label", x = 12, y = 90, size = 2.25, label = 0.9, fill = "white") +
    annotate(geom = "label", x = 12, y = 100, size = 2.25, label = 1.0, fill = "white") +
    
    coord_polar(start = 3.0105, direction = 1) +
    
    theme_minimal() +
    theme(panel.grid = element_blank(),
          plot.title = element_text(hjust = 0.5, face = "bold"),
          axis.title = element_blank(),
          axis.text.x = element_text(colour = "black"),
          axis.text.y = element_blank(),
          legend.position = "bottom")
  
  rosa
  
  #ggsave(rosa, filename = paste0("C:/Users/carla/OneDrive/Documentos/diagrama_rosas_Paulo/", names(freq_hour_prop)[i], ".jpg"),
  #       dpi = 600, h = 15, w = 15, units = "cm")
  
  print(i)
  
}


# Pearson's product-moment correlation between number of species and habitat amount
# across 40 landscape scales
sites_ = sites[, c(9:30)]
sites_ = sites_[-which(is.na(sites_$Richness_Observed)), ]

buffer = apply(sites_[, 3:ncol(sites_)], 2, function(z)
  cor.test(z, sites_$Richness_Observed))

# Convert the results stored as a 'list' object into a 'matrix' object
buffer = do.call(rbind, lapply(buffer, function(z) z[4]))

# Save the results in a 'data frame' object
buffer = data.frame(buffer = seq(50, 1000, 50), r = as.numeric(buffer))

# Scale of effect: 200-m buffer around mist-net lines
buffer[order(-buffer$r), ][1, ]

plot(buffer[order(-buffer$r), ]$buffer, buffer[order(-buffer$r), ]$r, pch=16, cex=1.2,ylab = "Pearson correlation coefficient", xlab = "Landscape size (m)", main = "Scale of effect")
abline(v = buffer[order(-buffer$r), ][1, ])



###############################
### NESTEDNESS PLOT ###########
### MAXIMALLY PACKED MATRIX ###
###############################

library(reshape2)
library(ggplot2)

# Cria a matriz de incidencia de sitios por especies
x =
  as.data.frame(
    tapply(frogs_validated$occurrence,
           list(frogs_validated$site,
                frogs_validated$species),
           sum))

# Converte NA em zero
x[is.na(x)] = 0

# Rows are sites
# Columns are species
# Sort rows by richness followed by abundance
# Sort columns by incidence followed by abundance
x.sort =
  x[order(-rowSums(ifelse(x > 0, 1, 0)),
          -rowSums(x)),
    order(colSums(ifelse(x > 0, 1, 0)),
          colSums(x))]

# Adiciona uma coluna com o nome dos sitios
x.sort$site = rownames(x.sort)

# Converte a matrix para o formato de tabela longa
x.melt = melt(x.sort)

# Ordena os sitios
x.melt$site = factor(x.melt$site,
                     levels = unique(x.melt$site))

# Converte os valores de abundancia em incidencia
x.melt$incidence = ifelse(x.melt$value > 0, 1, 0)

# Produz o grafico
p = 
  
  ggplot(data = x.melt,
         aes(x = site, y = variable, fill = incidence)) +
  
  #labs(x = "Sites by species richness",
  #     y = "Species by site incidence") +
  labs(x = NULL,
       y = NULL,
       title = "Maximally packed matrix for diurnal frogs") +
  
  geom_tile(color = "white",
            linewidth = 0.5,
            linetype = 1) +
  
  scale_fill_gradient(low = "grey90", high = "#006400") +
  
  theme_classic(base_size = 10) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.x = element_text(colour = "black",
                                   angle = 90,
                                   hjust = 1,
                                   vjust = 0.5,
                                   size = 6),
        axis.text.y = element_text(colour = "black",
                                   face = "italic",
                                   size = 7),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5))

# Visualiza o gráfico
p

# Salva o gráfico
ggsave(p, filename = "nested_frogs.pdf",
       width = 183, height = 89, units = "mm")







###############################
### NESTEDNESS PLOT ###########
### MAXIMALLY PACKED MATRIX ###
###############################

library(reshape2)
library(ggplot2)
library(stringr)
library(vegan)
library(rphylopic)

# Cria a matriz de incidencia de sitios por especies
x =
  as.data.frame(
    tapply(frogs_validated$occurrence,
           list(frogs_validated$site,
                frogs_validated$species),
           sum))

# Converte NA em zero
x[is.na(x)] = 0

# Rows are sites
# Columns are species
# Sort rows by richness followed by abundance
# Sort columns by incidence followed by abundance
x.sort =
  x[order(-rowSums(ifelse(x > 0, 1, 0)),
          -rowSums(x)),
    order(colSums(ifelse(x > 0, 1, 0)),
          colSums(x))]

# Adiciona uma coluna com o nome dos sitios
x.sort$site = rownames(x.sort)

# Converte a matrix para o formato de tabela longa
x.melt = melt(x.sort)

# Ordena os sitios
x.melt$site = factor(x.melt$site,
                     levels = unique(x.melt$site))

# Converte os valores de abundancia em incidencia
x.melt$incidence = ifelse(x.melt$value > 0, 1, 0)

# Produz o grafico
p = 
  
  ggplot(data = x.melt,
         aes(x = site, y = variable, fill = incidence)) +
  
  #labs(x = "Sites by species richness",
  #     y = "Species by site incidence") +
  labs(x = NULL,
       y = NULL,
       title = "Biodiversidade nas Cidades",
       subtitle = "Distribuição de sapos diurnos em 28 sítios de amostragem em 6 municípios") +
  
  geom_tile(color = "white",
            linewidth = 0.5,
            linetype = 1) +
  
  scale_fill_gradient(low = "grey90", high = "#499B75") +
  
  theme_classic(base_size = 10) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.x = element_text(colour = "black",
                                   angle = 90,
                                   hjust = 1,
                                   vjust = 0.5,
                                   size = 6),
        axis.text.y = element_text(colour = "black",
                                   face = "italic",
                                   size = 7),
        legend.position = "none",
        plot.title = element_text(colour = "#D9534F"))

p

ggsave(p, filename = "nested_frogs.jpg",  dpi = 900,
       width = 183, height = 89, units = "mm")


# Barplot com riqueza
sapos.ab = x

sapos.pa = ifelse(sapos.ab > 0, 1, 0)
aggregate(sapos.pa, list(cities), sum)


richness = data.frame(s = specnumber(z),
                      cities = word(rownames(z), 1, sep = "_"))

richness$cities = factor(richness$cities,
                         levels = c("RPE", "IT", "MA",
                                    "MC", "PF", "IR"))

# OBTEM A IMAGEM DE UM MORCEGO
uuid <- get_uuid(name = "Litoria infrafrenata")
img <- get_phylopic(uuid = uuid)

p =
  ggplot(data = richness,
         aes(x = cities, y = s)) +
  
  add_phylopic(img = img, color = "#499B75",
               x = 5.8, y = 8.5, ysize = 1.5) +
  
  labs(x = NULL, y = "Número de sapos diurnos",
       title = "Biodiversidade nas Cidades",
       subtitle = "Sapos diurnos na Região Metropolitana de Manaus") +
  scale_y_continuous(breaks = seq(1, 9, 2)) +
  scale_x_discrete(labels = c("Rio Preto\nda Eva",
                              "Itacoatiara",
                              "Manaus", "Manacapuru",
                              "Presidente\nFigueiredo",
                              "Iranduba")) +
  geom_boxplot(outlier.shape = NA,
               width = 0.7, fill = "#C59A6D", alpha = 1/3) +
  geom_jitter(width = 0.2,
              height = 0,
              shape = 21, size = 3, alpha = 2/3,
              colour = "black", fill = "#499B75") + 
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks = element_line(colour = "black"),
        axis.line = element_line(colour = "black"),
        legend.position = "bottom",
        plot.title = element_text(colour = "#D9534F"))

ggsave(p, filename = "riqueza_por_cidade.jpg", dpi = 600,
       width = 15, height = 12, units = "cm")


# Richness per city
agg = aggregate(x, list(cities), sum)
s.city = data.frame(s = specnumber(agg[, -1]),
                    city = agg[, 1])

s.city$city = factor(s.city$city,
                     levels = s.city[order(-s.city$s), "city"])


g = 
  
  ggplot(s.city,
         aes(x = city, y = s, label = s)) +
  
  labs(x = NULL, y = "Número de sapos diurnos",
       title = "Biodiversidade nas Cidades",
       subtitle = "Total de espécies de sapos diurnos por município") +
  
  scale_x_discrete(labels = c("Rio Preto\nda Eva",
                              "Manaus",
                              "Itacoatiara", "Manacapuru",
                              "Presidente\nFigueiredo",
                              "Iranduba")) +
  
  geom_col(width = 0.8,
           fill = "#499B75") +
  geom_text(vjust = 2, colour = "white", size = 6) +
  
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "white"),
        axis.text.x = element_text(colour = "black"),
        axis.text.y = element_text(colour = "white"),
        axis.ticks = element_blank(),
        axis.line = element_blank(),
        legend.position = "bottom",
        plot.title = element_text(colour = "#D9534F"))

g

ggsave(g, filename = "riqueza_total_por_cidade.jpg", dpi = 600,
       width = 15, height = 12, units = "cm")


# Ocorrencia nos sitios
occ = sort(specnumber(t(x)), decreasing = TRUE)

y = t(x)
rownames(y[order(specnumber(y),
                 rowSums(y)), ])


occ = data.frame(species = names(occ),
                 occ = occ)
rownames(occ) = NULL
occ$species = factor(occ$species,
                     levels = rownames(y[order(specnumber(y),
                                               rowSums(y)), ]))

gg_occ = 
  
  ggplot(data = occ,
         aes(x = occ, y = species, label = occ)) +
  
  labs(x = NULL,
       y = NULL,
       title = "Biodiversidade nas Cidades",
       subtitle = "Número de sítios de amostragem com registro das espécies") +
  
  geom_col(width = 0.8,
           fill = "#499B75") +
  geom_text(hjust = 1.5, colour = "white", size = 4) +
  
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "black"),
        axis.text.x = element_blank(),
        axis.text.y = element_text(colour = "black",
                                   face = "italic"),
        axis.ticks = element_blank(),
        axis.line = element_blank(),
        legend.position = "bottom",
        plot.title = element_text(colour = "#D9534F"))

# Visualiza o grafico
gg_occ

ggsave(gg_occ, filename = "frequencia_especies.jpg", dpi = 600,
       width = 18, height = 12, units = "cm")




# Variaveis locais
loc = read.csv("C:\\Users\\Anderson\\Downloads\\Variaveis ambientais tabela consolidada.xlsx - Sheet1.csv")


z=tapply(frogs_raw$occurrence, list(frogs_raw$site, frogs_raw$species), max)
z[is.na(z)] = 0


loc.rich = data.frame(richness = specnumber(z))

loc$rich = loc.rich$richness[match(loc$Point.ID,
                                   rownames(loc.rich))]

loc = na.omit(loc)

# Fechamento do dossel
a = 
  ggplot(data = loc[order(loc$canopy_cover,
                          loc$rich), ],
         aes(x = canopy_cover, y = rich)) + 
  
  labs(x = "Fechamento do dossel (%)", y = "Número de sapos diurnos",
       title = "Biodiversidade nas Cidades",
       subtitle = "Efeito do ambiente sobre o número de sapos diurnos") +
  scale_y_continuous(breaks = seq(1, 9, 2)) +
  geom_smooth(method = "lm", colour = "#D9534F",
              fill = "#C59A6D", alpha = 1/3) +
  geom_point(shape = 21, size = 3, alpha = 2/3,
             colour = "black", fill = "#499B75") + 
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks = element_line(colour = "black"),
        axis.line = element_line(colour = "black"),
        legend.position = "bottom",
        plot.title = element_text(colour = "#D9534F"))

ggsave(a, filename = "dossel.jpg", dpi = 600,
       width = 15, height = 12, units = "cm")


# Profundidade da serrapilheira
b = ggplot(data = loc[order(loc$litter._cm,
                            loc$rich), ],
           aes(x = litter._cm, y = rich)) + 
  
  labs(x = "Profundidade da serrapilheira (cm)",
       y = "Número de sapos diurnos",
       title = "Biodiversidade nas Cidades",
       subtitle = "Efeito do ambiente sobre o número de sapos diurnos") +
  scale_y_continuous(breaks = seq(1, 9, 2)) +
  scale_x_continuous(breaks = seq(1, 7, 1)) +
  
  geom_smooth(method = "lm", colour = "#D9534F",
              fill = "#C59A6D", alpha = 1/3) +
  geom_point(shape = 21, size = 3, alpha = 2/3,
             colour = "black", fill = "#499B75") + 
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks = element_line(colour = "black"),
        axis.line = element_line(colour = "black"),
        legend.position = "bottom",
        plot.title = element_text(colour = "#D9534F"))

ggsave(b, filename = "serrapilheira.jpg", dpi = 600,
       width = 15, height = 12, units = "cm")


# Troncos caídos
c = ggplot(data = loc[order(loc$logs,
                            loc$rich), ],
           aes(x = logs, y = rich)) + 
  
  labs(x = "Número de troncos caídos",
       y = "Número de sapos diurnos",
       title = "Biodiversidade nas Cidades",
       subtitle = "Efeito do ambiente sobre o número de sapos diurnos") +
  scale_y_continuous(breaks = seq(1, 9, 2)) +
  scale_x_continuous(breaks = seq(0, 14, 2)) +
  
  geom_smooth(method = "lm", colour = "#D9534F",
              fill = "#C59A6D", alpha = 1/3) +
  geom_point(shape = 21, size = 3, alpha = 2/3,
             colour = "black", fill = "#499B75") + 
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks = element_line(colour = "black"),
        axis.line = element_line(colour = "black"),
        legend.position = "bottom",
        plot.title = element_text(colour = "#D9534F"))

ggsave(c, filename = "troncos.jpg", dpi = 600,
       width = 15, height = 12, units = "cm")


# Forest cover within the local landscape
sites$rich = specnumber(z)[match(sites$Name, rownames(z))]
sites = na.omit(sites)

cbind(r = sort(apply(sites[, 8:27], 2, function(x) cor.test(x, sites$rich))))

# Cobertura de floresta
d = ggplot(data = sites[order(sites$Forest_cover_300_m,
                              sites$rich), ],
           aes(x = Forest_cover_300_m, y = rich)) + 
  
  labs(y = "Número de sapos diurnos",
       x = "Cobertura de floresta em 300 m de raio (%)",
       title = "Biodiversidade nas Cidades",
       subtitle = "Efeito do ambiente sobre o número de sapos diurnos") +
  scale_y_continuous(breaks = seq(1, 9, 2)) +
  geom_smooth(method = "lm", colour = "#D9534F",
              fill = "#C59A6D", alpha = 1/3) +
  geom_point(shape = 21, size = 3, alpha = 2/3,
             colour = "black", fill = "#499B75") + 
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks = element_line(colour = "black"),
        axis.line = element_line(colour = "black"),
        legend.position = "bottom",
        plot.title = element_text(colour = "#D9534F"))

ggsave(d, filename = "forest_cover.jpg", dpi = 600,
       width = 15, height = 12, units = "cm")



nmds = metaMDS(z[rowSums(z) > 0, ])
nmds

# Extrai os valores dos 2 primeiros eixos da PCoA
positions = as.data.frame(nmds$points)

# Renomeia as colunas
colnames(positions) = c("NMDS1", "NMDS2")

# Adiciona o codigo do municipio
positions$city_code = word(rownames(positions), 1, sep = "_")

# Adiciona o nome do municipio
positions$city_name = positions$city_code
positions$city_name[positions$city_name == "IR"] = "Iranduba"
positions$city_name[positions$city_name == "IT"] = "Itacoatiara"
positions$city_name[positions$city_name == "MC"] = "Manacapuru"
positions$city_name[positions$city_name == "MA"] = "Manaus"
positions$city_name[positions$city_name == "PF"] = "Presidente Figueiredo"
positions$city_name[positions$city_name == "RPE"] = "Rio Preto da Eva"

# Poligonos do grafico
find_hull = function(positions) positions[chull(positions$NMDS1, positions$NMDS2), ]
hulls = ddply(positions, "city_name", find_hull)

# Produz o grafico com os 2 primeiros eixos da PCoA
gg_pcoa = 
  
  ggplot(data = positions[order(positions$NMDS1,
                                positions$NMDS2), ],
         aes(x = NMDS1, y = NMDS2,
             colour = city_name, fill = city_name)) + 
  
  labs(x = "NMDS eixo 1",
       y = paste0("NMDS eixo 2"),
       colour = NULL,
       fill = NULL,
       title = "Biodiversidade nas Cidades",
       subtitle = "Composição de espécies de sapos diurnos") +
  
  scale_colour_brewer(type = "qual", palette = "Set1") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  
  geom_polygon(data = hulls, aes(colour = NULL),
               alpha = 0.2, show.legend = FALSE) +
  
  geom_point(size = 3, shape = 21, colour = "black", alpha = 0.6) +
  
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks = element_line(colour = "black"),
        axis.line = element_line(colour = "black"),
        legend.position = "bottom",
        plot.title = element_text(colour = "#D9534F")) +
  annotate("text",
           x = min(positions$NMDS1), hjust = 0, vjust = -0.5,
           y = min(positions$NMDS2), label = "Stress: 0.105")

# Visualiza o grafico
gg_pcoa

ggsave(gg_pcoa, filename = "nmds.jpg", dpi = 600,
       width = 15, height = 15, units = "cm")



#########################
### RASTER TO POLYGON ###
#########################

pt = sites_shp[1, ]
b = buffer(x = pt,
           width = 1000,
           dissolve = FALSE)

mapbiomas_b = crop(mapbiomas, b)
plot(mapbiomas_b)
points(pt)
plot(b, add = T)

b_mask = mask(mapbiomas_b, b)
plot(b_mask)
points(pt)
plot(b, add = T)

# Converte raster em poligono
shp =
  st_as_sf(
    disaggregate(
      rasterToPolygons(
        b_mask,
        fun = function(x){x == 3}, # 3 = forest
        n = 8,
        na.rm = TRUE,
        digits = 6,
        dissolve = TRUE)))

# Visualiza a paisagem
plot(shp)

# Forest cover (metric of habitat loss)
fc_area = sum(st_area(shp)) # soma da area dos fragmentos
lc_area = st_area(st_as_sf(b)) # area da paisagem
fc_perc = fc_area/lc_area * 100 # porcentagem de floresta
fc_perc

# Number of fragments (metric of fragmentation)
number_frags = length(shp$geometry)
number_frags

# Edge density (metric of habitat degradation)
edge_length = sum(st_length(st_cast(shp, "MULTILINESTRING")))
edge_density = edge_length / lc_area
edge_density
