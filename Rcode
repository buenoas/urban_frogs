###############################################
### Analise dos dados de sapos urbanos ########
### Dissertacao do Paulo Mateus Cruz Santos ###
###############################################

# Define a area de trabalho
setwd("G:/My Drive/Pesquisa/Parcerias/Paulo Mateus")

# Limpa a area de trabalho
remove(list = ls())

# Desabilita a notacao cientifica
options(scipen = 999)

# Garante a obtencao dos mesmos resultados toda vez que o codigo for rodado
set.seed(2092270023) # valor obtido com o comando "sample(.Machine$integer.max, 1)"

# Carrega os pacotes
library(vegan)
library(stringr)
library(stringi)
library(ggplot2)
library(iNEXT)
library(readxl)
library(janitor)
library(sf)
library(terra)
library(landscapemetrics)
library(corrplot)


############################################
### IMPORTA OS DADOS BRUTOS DAS ESPECIES ###
############################################

# Adenomera andreae
A_andreae = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_andreae_ALL.csv")

# Allobates femoralis
A_femoralis = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_femoralis_ALL.csv")

# Ameerega hahneli (vazio)
A_hahneli = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_hahneli_ALL2.csv")

# Adenomera hylaedactyla
A_hylaedactyla = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_hylaedactyla___.csv")

# Amazophrynella manaos
A_manaos = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_manaos_ALL.csv")
A_manaos$species[A_manaos$species == "Amazophrynella minuta"] = "Amazophrynella manaos" # atualiza o nome da especie

# Allobates paleovarzensis
A_paleovarzensis = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_paleovarzensis_ALL__.csv")

# Atelopus spumarius
A_spumarius = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_spumarius_ALL.csv")

# Anomaloglossus stepheni
A_stepheni = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_stepheni.csv")

# Allobates sumtuosus
A_sumtuosus = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_sumtuosus_ALL_7.csv")

# Ameerega trivittata
A_trivittata = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_trivittata_ALL.csv")

# Chiasmocleis shudikarensis
C_shudikarensis = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/C_shudikarensis_ALL_.csv")

# Dendropsophus minutus
D_minutus = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/D_minutus_ALL.csv")

# Elachistocleis bicolor
E_bicolor = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/E_bicolor_ALL.csv")

# Leptodactylus petersii
L_petersii = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/L_petersii_ALL.csv")

# Leptodactylus stenodema
L_stenodema = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/L_stenodema_ALL_teste.csv")

# Pristimantis fenestratus
P_fenestratus = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/P_fenestratus_ALL.csv")

# Rhinella proboscidea
R_proboscidea = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/R_proboscidea_ALL____.csv")

# Synapturanus mirandaribeiroi
S_mirandaribeiroi = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/S_mirandaribeiroi_m1.csv")

# Synapturanus salseri
S_salseri = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/S_salseri_ALL.csv")

# JUNTA OS DADOS BRUTOS DAS ESPECIES
# Ameerega hahneli nao aparece, porque nao foi detectada pelo Pattern Matching (Arbimon)
frogs_raw = rbind(A_andreae,
                  A_femoralis,
                  A_hahneli,
                  A_hylaedactyla,
                  A_manaos,
                  A_paleovarzensis,
                  A_spumarius,
                  A_stepheni,
                  A_sumtuosus,
                  A_trivittata,
                  C_shudikarensis,
                  D_minutus,
                  E_bicolor,
                  L_petersii,
                  L_stenodema,
                  P_fenestratus,
                  R_proboscidea,
                  S_mirandaribeiroi,
                  S_salseri)

# Das 19 especies investigadas, 18 foram detectadas pelo Pattern Matching (Arbimon)
sort(unique(frogs_raw$species))

# Das 18 especies detectadas pelo Pattern Matching (Arbimon), 13 foram validadas (TRUE POSITIVES)
sort(unique(subset(frogs_raw, validated == "present")$species))

# O nome de todas as especies esta correto, conforme a lista de Frost (2023-04-06)
# https://amphibiansoftheworld.amnh.org/content/search?subtree=&subtree_id=&country%5B%5D=194&search_type=count

# Cria uma coluna em que cada linha eh um registro de ocorrencia
frogs_raw$occurrence = 1
frogs_raw$occurrence[frogs_raw$validated != "present"] = 0

# Mantem apenas as deteccoes validadas
frogs_validated = subset(frogs_raw, validated == "present")

# Remove as deteccoes duplicadas e mantem apenas as colunas relevantes
# Deteccoes duplicadas sao aquelas com mais de um registro da mesma especie na mesma gravacao
# Segundo a dissertacao do Paulo, a mesma gravacao poderia ter ate tres registros da mesma especie
# O comando abaixo deixa apenas um registro de cada especie por gravacao
frogs_validated = unique(frogs_validated[, c("recording",
                                             "site",
                                             "species")])

# Cria uma coluna em que cada linha eh um registro de ocorrencia
frogs_validated$occurrence = 1


######################################
### IMPORTA OS DADOS DAS GRAVACOES ###
######################################

# Importa a lista de arquivos de gravacao da playlist "TUDO"
recordings = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/export-recording.csv")

# Substitui ano com 2 digitos para ano com 4 digitos
recordings$year = as.numeric(paste0(20, recordings$year))

# Adiciona o dia Juliano
recordings$julian_day = format(as.Date(gsub("/", "-", recordings$date)), "%j") 

# Remove a coluna "date"
recordings$date = NULL

# Reordena as colunas
recordings = recordings[, c(1, 2, 5, 4, 3, 6)]

# Mantem apenas as colunas relevantes
recordings_raref = recordings[, c("filename",
                                  "site")]
# Renomeia a coluna "filename"
colnames(recordings_raref)[1] = "recording"

# Adiciona uma especie "dummy"
# A inclusao dessa "especie" vai permitir a construcao das matrizes de analise de rarefacao
# A ideia eh manter o esforco amostral - i.e. todas as gravacoes de cada sitio
# Apos a construcao das matrizes de analise de rarefacao, a especie "dummy" sera removida
recordings_raref$species = "dummy"

# Cria uma coluna em que cada linha eh um registro de ocorrencia da especie "dummy"
recordings_raref$occurrence = 1


###############################################
### RIQUEZA RAREFEITA DE ESPECIES POR SITIO ###
###############################################

# Combina os dados das especies com os dados de esforco (gravacoes)
data_raref = rbind(frogs_validated,
                   recordings_raref)

# Determina a relacao de sitios para analisar
sitios_raref = sort(unique(data_raref$site))

# Cria uma matriz de incidencia de especie por gravacao para cada sitio
raref_list = list()

for (i in 1:length(sitios_raref)) {
  
  # Seleciona apenas um dos sitios
  raref_site = subset(data_raref, site == sitios_raref[i])
  
  # Cria uma matriz de incidencia de especies por gravacao
  raref_df = as.data.frame(tapply(raref_site$occurrence,
                                  list(raref_site$species,
                                       raref_site$recording),
                                  sum))
  
  # Converte NA em zero
  raref_df[is.na(raref_df)] = 0
  
  # Remove a especie dummy
  raref_df = raref_df[-which(rownames(raref_df) == "dummy"), ]
  
  # Salva o resultado na lista
  raref_list[[i]] = raref_df
  
  print(i)
  
}

# Da nome aos sitios da lista
names(raref_list) = sitios_raref

# Remove os sitios com zero especies da lista
raref_list = raref_list[-which(unlist(lapply(raref_list, nrow)) == 0)]

# Realiza as analises de rarefacao padronizadas por amostras (numero de gravacoes)
# O numero de gravacoes utilizado foi o dobro (2198) do sitio (MC_2_B) com o menor numero de gravacoes (1099)
raref_D = estimateD(raref_list,
                    q = 0,
                    datatype = "incidence_raw",
                    base = "size",
                    level = NULL,
                    nboot = 1000,
                    conf = 0.95)


###################################
### IMPORTA OS DADOS DOS SITIOS ###
###################################

# Observacao sobre alguns sitios
# MA_11 e RPE_5_B nao entraram na playlist denominada "TUDO"
# IT_6_B e MA_5_C tiveram zero gravacoes
# MA_5_B, MA_5_C, RPE_5_B e IT_7_B nao possuem variaveis locais

# Sitios (conforme Arbimon)
sites = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/sites-export.csv")

# Remove alguns sitios
sites = sites[-which(sites$Name == "Fonte"), ]
sites = sites[-which(sites$Name == "frogs"), ]

#sites = sites[-which(sites$Name == "MA_11"), ]
#sites = sites[-which(sites$Name == "RPE_5_B"), ]
#sites = sites[-which(sites$Name == "IT_6_B"), ]
#sites = sites[-which(sites$Name == "MA_5_C"), ]
#sites = sites[-which(sites$Name == "MA_5_B"), ]
#sites = sites[-which(sites$Name == "IT_7_B"), ]

# Renumera as linhas
rownames(sites) = NULL

# Adiciona o esforco amostral (i.e. numeros de gravacoes) por sitio
effort = data.frame(table(recordings$site))
sites$Recordings_Playlist = effort$Freq[match(sites$Name, effort$Var1)]

# Constroi a matriz de sitios por especies
comm = as.data.frame(tapply(frogs_raw$occurrence,
                            list(frogs_raw$site, frogs_raw$species),
                            sum))

# Transforma NA em zero
comm[is.na(comm)] = 0

# Calcula a riqueza observada de especies por sitios
richness = rowSums(ifelse(comm > 0, 1, 0))

# Adiciona a riqueza de observada de especies ao objeto "sites"
sites$Richness_Observed = richness[match(sites$Name,
                                         names(richness))]

# Adiciona a riqueza rarefeita de especies
sites$Richness_Rarefied = raref_D$qD[match(sites$Name,
                                           raref_D$Assemblage)]


#############################################
### IMPORTA OS DADOS DAS VARIAVEIS LOCAIS ###
#############################################

######################
### TRONCOS CAIDOS ###
### SERRAPILHEIRA ####
######################

# Troncos caidos e serrapilheira
troncos = as.data.frame(read_xlsx("G:/My Drive/Pesquisa/Parcerias/Paulo Mateus/Serapilheira e troncos caídos.xlsx", sheet = 1))

# Remove linhas e colunas em branco
troncos = remove_empty(troncos, quiet = FALSE)

# Remove as linhas sem dados (NA)
troncos = na.omit(troncos)

# Remove as colunas das medias
troncos$...9 = NULL
troncos$...17 = NULL

# Renumera as linhas
rownames(troncos) = NULL

# Renomeia as colunas
colnames(troncos) = c("Site_Number",
                      "Site_Name",
                      "Logs_0-50_m", "Logs_50-100_m",
                      "Logs_100-150_m", "Logs_150-200_m",
                      "Logs_200-250_m", "Logs_250-300_m",
                      "Litter_cm_0-50_m", "Litter_cm_50-100_m",
                      "Litter_cm_100-150_m", "Litter_cm_150-200_m",
                      "Litter_cm_200-250_m", "Litter_cm_250-300_m")

# Remove a casa decimal do numero do sitio
troncos$Site_Number = gsub("\\.0", "", troncos$Site_Number)

# Converter os valores de troncos caidos e serrapilheira em numeric
troncos[, 3:14] = apply(troncos[, 3:14], 2, as.numeric)

# Corrige o "Site_Number" da Ducke de 25 (errado) para 23 (correto)
troncos$Site_Number[troncos$Site_Number == 25] = 23


##############
### DOSSEL ###
##############

# Importa os dados de cobertura e fechamento do dossel
dossel = as.data.frame(read_xlsx("G:/My Drive/Pesquisa/Parcerias/Paulo Mateus/Cobertura de Dossel.xlsx", sheet = 1))

# Remove as colunas em branco
dossel$...9 =  NULL
dossel$...10 = NULL

# Remove as colunas das medias
dossel$MÉDIA...8 = NULL
dossel$MÉDIA...18 = NULL

# Remove as colunas com o nome da cidade
dossel$CIDADE...1 = NULL
dossel$CIDADE...11 = NULL

# Remove a coluna repetida com o numero do sitio
dossel$SÍTIO...12 = NULL

# Renomeia as colunas
colnames(dossel) = c("Site_Number",
                     "Canopy_Cover_50_m", "Canopy_Cover_100_m",
                     "Canopy_Cover_150_m", "Canopy_Cover_200_m",
                     "Canopy_Cover_250_m",
                     "Canopy_Closure_50_m", "Canopy_Closure_100_m",
                     "Canopy_Closure_150_m", "Canopy_Closure_200_m",
                     "Canopy_Closure_250_m")

# Corrige o "Site_Number" da Ducke de 25 (errado) para 23 (correto)
dossel$Site_Number[dossel$Site_Number == 25] = 23


##########################
### CODIGOS DOS SITIOS ###
##########################

# Importa a tabela com a correspondencia entre o Site_Number e Name da tabela 'sites'
consolidada = as.data.frame(read_xlsx("G:/My Drive/Pesquisa/Parcerias/Paulo Mateus/Variaveis ambientais tabela consolidada.xlsx", sheet = 1))

# Adiciona o Name dos sitios
troncos$Name = consolidada$`Point ID`[match(troncos$Site_Number,
                                            consolidada$plot)]

dossel$Name = consolidada$`Point ID`[match(dossel$Site_Number,
                                           consolidada$plot)]


######################
### JUNTA OS DADOS ###
######################

# Merge a tabela sites do Arbimon com as variaveis locais
# Troncos e serrapilheira
sites_var = merge(x = sites, y = troncos, by = "Name",
                  all.x = TRUE, all.y = FALSE, sort = TRUE)

# Cobertura e fechamento do dossel
sites_var = merge(x = sites_var, y = dossel, by = "Site_Number",
                  all.x = TRUE, all.y = FALSE, sort = TRUE)


# Adiciona uma coluna com o codigo da cidade
sites_var$City_Code = word(sites_var$Name.x, 1, sep = "_")

# Remove a coluna Name.y
sites_var$Name.y = NULL

# Adiciona uma coluna com o nome da cidade
sites_var$City_Name = "Iranduba"
sites_var$City_Name[sites_var$City_Code == "IT"] = "Itacoatiara"
sites_var$City_Name[sites_var$City_Code == "MA"] = "Manaus"
sites_var$City_Name[sites_var$City_Code == "MC"] = "Manacapuru"
sites_var$City_Name[sites_var$City_Code == "PF"] = "Presidente_Figueiredo"
sites_var$City_Name[sites_var$City_Code == "RPE"] = "Rio_Preto_da_Eva"

# Renomeia o nome da coluna Name para Site_Code
colnames(sites_var)[colnames(sites_var) == "Name.x"] = "Site_Code"

# Renomeia o nome da coluna Name para Id
colnames(sites_var)[colnames(sites_var) == "Id"] = "Site_Id_Arbimon"

# Remove caracteres especiais da coluna Site_Name
# Substitui espacos por "_" na coluna Site_Name
sites_var$Site_Name = stri_trans_general(sites_var$Site_Name,
                                         "Latin-ASCII")
sites_var$Site_Name = gsub(" ", "_", sites_var$Site_Name)
sites_var$Site_Name = gsub("/", "_", sites_var$Site_Name)

# Substitui "/" por "_" na coluna timezone
sites_var$Timezone = gsub("/", "_", sites_var$Timezone)

# Padroniza o nome das colunas
sites_var = clean_names(sites_var)

# Ordena as colunas
sites_var = sites_var[, c("city_name",
                          "city_code",
                          "site_name",
                          "site_code",
                          "site_number",
                          "site_id_arbimon",
                          "longitude",
                          "latitude",
                          "altitude",
                          "timezone",
                          "recordings_count",
                          "recordings_playlist",
                          "richness_observed",
                          "richness_rarefied",
                          "logs_0_50_m",
                          "logs_50_100_m",
                          "logs_100_150_m",
                          "logs_150_200_m",
                          "logs_200_250_m",
                          "logs_250_300_m",
                          "litter_cm_0_50_m",
                          "litter_cm_50_100_m",
                          "litter_cm_100_150_m",
                          "litter_cm_150_200_m",
                          "litter_cm_200_250_m",
                          "litter_cm_250_300_m",
                          "canopy_cover_50_m",
                          "canopy_cover_100_m",
                          "canopy_cover_150_m",
                          "canopy_cover_200_m",
                          "canopy_cover_250_m",
                          "canopy_closure_50_m",
                          "canopy_closure_100_m",
                          "canopy_closure_150_m",
                          "canopy_closure_200_m",
                          "canopy_closure_250_m")]


##################################
### IMPORTA OS DADOS ESPACIAIS ###
##################################

# Importa o raster do MapBiomas
study_region =
  rast("https://raw.githubusercontent.com/buenoas/urban_frogs/main/study_region.tif")

# Projeta o raster em UTM 21 S
study_region_utm =
  project(x = study_region,
          y = "epsg:32721", # projeta o raster em UTM 21 S (32721)
          method = "near")

# Importa as coordenadas dos locais de amostragem
pts = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/sites-export.csv") %>%
  st_as_sf(coords = c("Longitude", "Latitude")) %>%
  st_set_crs(4326) %>% # codigo para WGS 84
  st_transform(st_crs(32721)) # projeta as coordenadas em UTM 21 S (32721)

# Plota o raster e os pontos
plot(study_region_utm)
plot(pts$geometry, add = TRUE)

# Verifica a paisagem
check_landscape(study_region_utm)

############################
### METRICAS DE PAISAGEM ###
############################

# Calcula as metricas de paisagem para diferentes buffers
buffers = seq(200, 1000, 100)

landscape_predictors_list = list()

for (i in 1:length(buffers)) {
  
  landscape_predictors =
    sample_lsm(study_region_utm,
               y = pts,
               plot_id = pts$Name,
               shape = "circle",
               size = buffers[i],
               all_classes = TRUE,
               directions = 4,
               what = c("lsm_c_pland", # Forest cover (%)
                        "lsm_c_ed", # Edge density (m/m^2)
                        "lsm_c_np")) # Number of fragments (n)
  
  # Seleciona apenas a classe "forest" (pixel value 3)
  landscape_predictors =
    subset(landscape_predictors, class == 3)
  
  # Organiza os valores das metricas em uma data frame
  landscape_predictors_df = 
    tapply(landscape_predictors$value,
           list(landscape_predictors$plot_id, landscape_predictors$metric),
           unique) %>%
    data.frame()
  
  # Reordena as colunas
  landscape_predictors_df =
    landscape_predictors_df[, c("pland", "ed", "np")]
  
  # Renomeia as colunas para adicionar informar do buffer
  colnames(landscape_predictors_df) =
    paste0(colnames(landscape_predictors_df), "_", buffers[i], "m")
  
  # Salva os resultados
  landscape_predictors_list[[i]] = landscape_predictors_df
  
  print(i)
  
}

# Combina os resultados em uma data frase
landscape_predictors_buffers = do.call(cbind, landscape_predictors_list)

# Converte NA em zero
landscape_predictors_buffers[is.na(landscape_predictors_buffers)] = 0

# Adiciona uma coluna com o site_code
landscape_predictors_buffers$site_code = rownames(landscape_predictors_buffers)

# Adiciona o valores de cobertura florestal ao objeto "sites_var"
sites_var = merge(x = sites_var, y = landscape_predictors_buffers,
                  by = "site_code", all.x = TRUE, all.y = FALSE, sort = TRUE)


###############################################
### JUNTA AS VARIAVEIS LOCAIS E DE PAISAGEM ###
### COM OS DADOS DE COMPOSICAO DE ESPECIES ####
###############################################

# Produz a matriz de sitios por especie
# O valores nas celulas correspondem ao numero de registros
# 1 registro = 1 deteccao em 1 minuto de gravacao
comm_validated = as.data.frame(
  tapply(frogs_validated$occurrence,
         list(frogs_validated$site, frogs_validated$species),
         sum))

# Converte NA em zero
comm_validated[is.na(comm_validated)] = 0

# Substitui espacoes por "_"
colnames(comm_validated) = gsub(" ", "_", colnames(comm_validated))

# Adiciona uma coluna com o site_Code
comm_validated$site_code = rownames(comm_validated)

# Junta variaveis locais e de paisagem
# com dados de composicao de especies
sites_var_comm = merge(x = sites_var, y = comm_validated, by = "site_code",
                       all.x = TRUE, all.y = FALSE, sort = TRUE)

# Adiciona as espescies detectadas pelo algoritmo,
# mas com zero validacoes humanas (falto-positivos)
sites_var_comm$Allobates_sumtuosus = NA
sites_var_comm$Atelopus_spumarius = NA
sites_var_comm$Chiasmocleis_shudikarensis = NA
sites_var_comm$Dendropsophus_minutus = NA
sites_var_comm$Elachistocleis_bicolor = NA

# Adiciona a especie que nao foi detectada pelo algoritmo
sites_var_comm$Ameerega_hahneli = NA

# Remove a coluna timezone
sites_var_comm$timezone = NULL

# Salva a planilha de dados com as variaveis resposta e preditoras
write.csv(sites_var_comm, "sites_var_comm.csv", row.names = FALSE)
