###############################################
### Analise dos dados de sapos urbanos ########
### Dissertacao do Paulo Mateus Cruz Santos ###
###############################################

# Define a area de trabalho
#setwd("C:/Users/carla/OneDrive/Documentos/diagrama_rosas_Paulo")

# Limpa a area de trabalho
remove(list = ls())

# Desabilita a notacao cientifica
options(scipen = 999)

# Garante a obtencao dos mesmos resultados toda vez que o codigo for rodado
set.seed(2092270023) # valor obtido com o comando "sample(.Machine$integer.max, 1)"

# Carrega os pacotes
library(vegan)
library(stringr)
library(plyr)
library(ggplot2)
library(rgdal)
library(rgeos)
library(raster)
library(iNEXT)


############################################
### IMPORTA OS DADOS BRUTOS DAS ESPECIES ###
############################################

# Adenomera andreae
A_andreae = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_andreae_ALL.csv")

# Allobates femoralis
A_femoralis = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_femoralis_ALL.csv")

# Ameerega hahneli (vazio)
A_hahneli = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_hahneli_ALL2.csv")

# Adenomera hylaedactyla
A_hylaedactyla = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_hylaedactyla___.csv")

# Amazophrynella manaos
A_manaos = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_manaos_ALL.csv")
A_manaos$species[A_manaos$species == "Amazophrynella minuta"] = "Amazophrynella manaos" # atualiza o nome da especie

# Allobates paleovarzensis
A_paleovarzensis = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_paleovarzensis_ALL__.csv")

# Atelopus spumarius
A_spumarius = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_spumarius_ALL.csv")

# Anomaloglossus stepheni
A_stepheni = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_stepheni.csv")

# Allobates sumtuosus
A_sumtuosus = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_sumtuosus_ALL_7.csv")

# Ameerega trivittata
A_trivittata = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/A_trivittata_ALL.csv")

# Chiasmocleis shudikarensis
C_shudikarensis = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/C_shudikarensis_ALL_.csv")

# Dendropsophus minutus
D_minutus = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/D_minutus_ALL.csv")

# Elachistocleis bicolor
E_bicolor = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/E_bicolor_ALL.csv")

# Leptodactylus petersii
L_petersii = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/L_petersii_ALL.csv")

# Leptodactylus stenodema
L_stenodema = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/L_stenodema_ALL_teste.csv")

# Pristimantis fenestratus
P_fenestratus = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/P_fenestratus_ALL.csv")

# Rhinella proboscidea
R_proboscidea = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/R_proboscidea_ALL____.csv")

# Synapturanus mirandaribeiroi
S_mirandaribeiroi = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/S_mirandaribeiroi_m1.csv")

# Synapturanus salseri
S_salseri = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/S_salseri_ALL.csv")

# JUNTA OS DADOS BRUTOS DAS ESPECIES
# Ameerega hahneli nao aparece, porque nao foi detectada pelo Pattern Matching (Arbimon)
frogs_raw = rbind(A_andreae,
                  A_femoralis,
                  A_hahneli,
                  A_hylaedactyla,
                  A_manaos,
                  A_paleovarzensis,
                  A_spumarius,
                  A_stepheni,
                  A_sumtuosus,
                  A_trivittata,
                  C_shudikarensis,
                  D_minutus,
                  E_bicolor,
                  L_petersii,
                  L_stenodema,
                  P_fenestratus,
                  R_proboscidea,
                  S_mirandaribeiroi,
                  S_salseri)

# Das 19 especies investigadas, 18 foram detectadas pelo Pattern Matching (Arbimon)
sort(unique(frogs_raw$species))

# Das 18 especies detectadas pelo Pattern Matching (Arbimon), 13 foram validadas (TRUE POSITIVES)
sort(unique(subset(frogs_raw, validated == "present")$species))

# O nome de todas as especies esta correto, conforme a lista de Frost (2023-04-06)
# https://amphibiansoftheworld.amnh.org/content/search?subtree=&subtree_id=&country%5B%5D=194&search_type=count

# Cria uma coluna em que cada linha eh um registro de ocorrencia
frogs_raw$occurrence = 1
frogs_raw$occurrence[frogs_raw$validated != "present"] = 0

# Mantem apenas as deteccoes validadas
frogs_validated = subset(frogs_raw, validated == "present")

# Remove as deteccoes duplicadas e mantem apenas as colunas relevantes
# Deteccoes duplicadas sao aquelas com mais de um registro da mesma especie na mesma gravacao
# Segundo a dissertacao do Paulo, a mesma gravacao poderia ter ate tres registros da mesma especie
# O comando abaixo deixa apenas um registro de cada especie por gravacao
frogs_validated = unique(frogs_validated[, c("recording",
                                             "site",
                                             "species")])

# Cria uma coluna em que cada linha eh um registro de ocorrencia
frogs_validated$occurrence = 1


######################################
### IMPORTA OS DADOS DAS GRAVACOES ###
######################################

# Importa a lista de arquivos de gravacao da playlist "TUDO"
recordings = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/export-recording.csv")

# Substitui ano com 2 digitos para ano com 4 digitos
recordings$year = as.numeric(paste0(20, recordings$year))

# Adiciona o dia Juliano
recordings$julian_day = format(as.Date(gsub("/", "-", recordings$date)), "%j") 

# Remove a coluna "date"
recordings$date = NULL

# Reordena as colunas
recordings = recordings[, c(1, 2, 5, 4, 3, 6)]

# Mantem apenas as colunas relevantes
recordings_raref = recordings[, c("filename",
                                  "site")]
# Renomeia a coluna "filename"
colnames(recordings_raref)[1] = "recording"

# Adiciona uma especie "dummy"
# A inclusao dessa "especie" vai permitir a construcao das matrizes de analise de rarefacao
# A ideia eh manter o esforco amostral - i.e. todas as gravacoes de cada sitio
# Apos a construcao das matrizes de analise de rarefacao, a especie "dummy" sera removida
recordings_raref$species = "dummy"

# Cria uma coluna em que cada linha eh um registro de ocorrencia da especie "dummy"
recordings_raref$occurrence = 1


###############################################
### RIQUEZA RAREFEITA DE ESPECIES POR SITIO ###
###############################################

# Combina os dados das especies com os dados de esforco (gravacoes)
data_raref = rbind(frogs_validated,
                   recordings_raref)

# Determina a relacao de sitios para analisar
sitios_raref = sort(unique(data_raref$site))

# Cria uma matriz de incidencia de especie por gravacao para cada sitio
raref_list = list()

for (i in 1:length(sitios_raref)) {
  
  # Seleciona apenas um dos sitios
  raref_site = subset(data_raref, site == sitios_raref[i])
  
  # Cria uma matriz de incidencia de especies por gravacao
  raref_df = as.data.frame(tapply(raref_site$occurrence,
                                  list(raref_site$species, raref_site$recording),
                                  sum))
  
  # Converte NA em zero
  raref_df[is.na(raref_df)] = 0
  
  # Remove a especie dummy
  raref_df = raref_df[-which(rownames(raref_df) == "dummy"), ]
  
  raref_list[[i]] = raref_df
  
  print(i)
  
}

# Da nome aos sitios da lista
names(raref_list) = sitios_raref

# Remove os sitios com zero especies da lista
raref_list = raref_list[-which(unlist(lapply(raref_list, nrow)) == 0)]

# Realiza as analises de rarefacao padronizadas por amostras (numero de gravacoes)
# O numero de gravacoes utilizado foi o dobro (2198) do sitio (MC_2_B) com o menor numero de gravacoes (1099)
raref_D = estimateD(raref_list,
                    q = 0,
                    datatype = "incidence_raw",
                    base = "size",
                    level = NULL,
                    nboot = 1000,
                    conf = 0.95)


###################################
### IMPORTA OS DADOS DOS SITIOS ###
###################################

# Observacao sobre alguns sitios
# MA_11 e RPE_5_B nao entraram na playlist denominada "TUDO"
# IT_6_B e MA_5_C tiveram zero gravacoes
# MA_5_B, MA_5_C, RPE_5_B e IT_7_B nao possuem variaveis locais

# Sitios (conforme Arbimon)
sites = read.csv("https://raw.githubusercontent.com/buenoas/urban_frogs/main/sites-export.csv")

# Remove alguns sitios
sites = sites[-which(sites$Name == "Fonte"), ]
sites = sites[-which(sites$Name == "frogs"), ]

#sites = sites[-which(sites$Name == "MA_11"), ]
#sites = sites[-which(sites$Name == "RPE_5_B"), ]
#sites = sites[-which(sites$Name == "IT_6_B"), ]
#sites = sites[-which(sites$Name == "MA_5_C"), ]
#sites = sites[-which(sites$Name == "MA_5_B"), ]
#sites = sites[-which(sites$Name == "IT_7_B"), ]

# Renumera as linhas
rownames(sites) = NULL

# Adiciona o esforco amostral (i.e. numeros de gravacoes) por sitio
effort = data.frame(table(recordings$site))
sites$Recordings_Playlist = effort$Freq[match(sites$Name, effort$Var1)]

# Constroi a matriz de sitios por especies
comm = as.data.frame(tapply(frogs_raw$occurrence,
                            list(frogs_raw$site, frogs_raw$species),
                            sum))

# Transforma NA em zero
comm[is.na(comm)] = 0

# Transforma a matriz em presenca-ausencia
comm = ifelse(comm > 0, 1, 0)

# Calcula a riqueza observada de especies por sitios
richness = rowSums(comm)

# Adiciona a riqueza de observada de especies ao objeto "sites"
sites$Richness_observed = richness[match(sites$Name,
                                         names(richness))]

# Adiciona a riqueza rarefeita de especies
sites$Richness_raref = raref_D$qD[match(sites$Name,
                                        raref_D$Assemblage)]


##########################
### ANALISES ESPACIAIS ###
##########################

# Importa o raster da regiao de estudo
# A regiao de estudo abrange os seis municipios amostrados da Regiao Metropolitana de Manaus
# O raster do MapBiomas corresponde a colecao 7.1, ano 2020
mapbiomas = raster("https://raw.githubusercontent.com/buenoas/urban_frogs/main/study_region.tif")

# Binariza o raster do MapBiomas
# Pixel value 3 = floresta (1); demais pixel values = nao-floresta (0)
values(mapbiomas) = ifelse(values(mapbiomas) == 3, 1, 0)

# Transforma as coordenadas dos sitios em um shapefile de pontos
sites_shp = SpatialPointsDataFrame(coords = sites[, 4:3], # 4 = Longitude, 3 = Latitude
                                   data = sites,
                                   proj4string = mapbiomas@crs)

# Carrega a funcao "landcover" para calcular a cobertura de floresta para varios tamanhos de buffer
source("https://raw.githubusercontent.com/buenoas/R-functions/main/landcover")

# Calcular a cobertura de floresta para varios tamanhos de buffer
# "3" = floresta
landcover_buffers = list(
  landcover(mapbiomas, sites_shp, 50)[, "1"], # 1 = floresta
  landcover(mapbiomas, sites_shp, 100)[, "1"],
  landcover(mapbiomas, sites_shp, 150)[, "1"],
  landcover(mapbiomas, sites_shp, 200)[, "1"],
  landcover(mapbiomas, sites_shp, 250)[, "1"],
  landcover(mapbiomas, sites_shp, 300)[, "1"],
  landcover(mapbiomas, sites_shp, 350)[, "1"],
  landcover(mapbiomas, sites_shp, 400)[, "1"],
  landcover(mapbiomas, sites_shp, 450)[, "1"],
  landcover(mapbiomas, sites_shp, 500)[, "1"],
  landcover(mapbiomas, sites_shp, 550)[, "1"],
  landcover(mapbiomas, sites_shp, 600)[, "1"],
  landcover(mapbiomas, sites_shp, 650)[, "1"],
  landcover(mapbiomas, sites_shp, 700)[, "1"],
  landcover(mapbiomas, sites_shp, 750)[, "1"],
  landcover(mapbiomas, sites_shp, 800)[, "1"],
  landcover(mapbiomas, sites_shp, 850)[, "1"],
  landcover(mapbiomas, sites_shp, 900)[, "1"],
  landcover(mapbiomas, sites_shp, 950)[, "1"],
  landcover(mapbiomas, sites_shp, 1000)[, "1"])

# Coloca os valores de cobertura de floresta lado a lado
landcover_buffers = do.call(cbind, landcover_buffers)

# Renomeia as colunas
colnames(landcover_buffers) = paste0("Forest_cover_",
                                     seq(50, 1000, 50),
                                     "_m")

# Adiciona o valores de cobertura florestal ao objeto "sites"
sites = cbind(sites, landcover_buffers)









##############################################
### REVISAR A NECESSIDADE DO CODIGO ABAIXO ###
##############################################

# Importa o raster do MapBiomas de 2017 (colecao 7)
mapbiomas_2017 = raster("C:\\Users\\Anderson\\Downloads\\brasil_coverage_2017.tif")

# Corta o raster para area de estudo (seis municipios)
mapbiomas_2017 = crop(mapbiomas_2017, mapbiomas)

# Binariza o raster
values(mapbiomas_2017) = ifelse(values(mapbiomas_2017) == 3, 1, 0)

# Calcular a cobertura de floresta para varios tamanhos de buffer
# "3" = floresta
landcover_buffers_2017 = list(
  landcover(mapbiomas_2017, sites_shp, 50)[, "1"], # 1 = floresta
  landcover(mapbiomas_2017, sites_shp, 100)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 150)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 200)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 250)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 300)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 350)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 400)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 450)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 500)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 550)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 600)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 650)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 700)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 750)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 800)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 850)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 900)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 950)[, "1"],
  landcover(mapbiomas_2017, sites_shp, 1000)[, "1"])

# Coloca os valores de cobertura de floresta lado a lado
landcover_buffers_2017 = do.call(cbind, landcover_buffers_2017)

# Renomeia as colunas
colnames(landcover_buffers_2017) = paste0("Forest_cover_",
                                          seq(50, 1000, 50),
                                          "_m")

for (i in 1:20) {
  plot(landcover_buffers[, i], landcover_buffers_2017[, i],
       main = paste0(colnames(landcover_buffers_2017)[i],
                     "\nr = ", round(cor(landcover_buffers[, i], landcover_buffers_2017[, i]), 2)))
  
}

landcover_2017_2020 = list()

for (i in 1:ncol(landcover_buffers)) {
  
  landcover_2017_2020[[i]] = data.frame(
    buffer_size = colnames(landcover_buffers)[i],
    site = sites$Name,
    mapbiomas_2020 = landcover_buffers[, i],
    mapbiomas_2017 = landcover_buffers_2017[, i],
    difference = landcover_buffers[, i] - landcover_buffers_2017[, i],
    pearson_correlation = cor(landcover_buffers[, i], landcover_buffers_2017[, i]))
  
  print(i)
  
}

landcover_2017_2020 = do.call(rbind, landcover_2017_2020)



#########################
### ANALISE DOS DADOS ###
#########################

# Cria uma matriz de abundancia de sitios x especies
df_ab = as.data.frame(
  tapply(frogs_validated$occurrence,
         list(frogs_validated$site, frogs_validated$species),
         sum))

# Converte NA em zero
df_ab[is.na(df_ab)] = 0

# Faz uma analise de ordenacao multivariada (PCoA)
# Padroniza os dados
frogs.std = df_ab/rowSums(df_ab) # dados de abundancia relativa
#frogs.std = decostand(df_ab, method = "pa") # dados de presence-absencia

# Calcula a distancia de Bray-Curtis entre os sitios
bray = vegdist(frogs.std, method = "bray")

# PCoA
pcoa = cmdscale(bray, k = 2, eig = TRUE, add = TRUE)

# Extrai os valores dos 2 primeiros eixos da PCoA
positions = as.data.frame(pcoa$points)

# Renomeia as colunas
colnames(positions) = c("PCo1", "PCo2")

# Adiciona o codigo do municipio
positions$city_code = word(rownames(positions), 1, sep = "_")

# Adiciona o nome do municipio
positions$city_name = positions$city_code
positions$city_name[positions$city_name == "IR"] = "Iranduba"
positions$city_name[positions$city_name == "IT"] = "Itacoatiara"
positions$city_name[positions$city_name == "MC"] = "Manacapuru"
positions$city_name[positions$city_name == "MA"] = "Manaus"
positions$city_name[positions$city_name == "PF"] = "Presidente Figueiredo"
positions$city_name[positions$city_name == "RPE"] = "Rio Preto da Eva"

# Porcentagem de explicacao dos eixos
percentage_explained = 100 * pcoa$eig / sum(pcoa$eig)

# Poligonos do grafico
find_hull = function(positions) positions[chull(positions$PCo1, positions$PCo2), ]
hulls = ddply(positions, "city_name", find_hull)

# Produz o grafico com os 2 primeiros eixos da PCoA
gg_pcoa = 
  
  ggplot(data = positions[order(positions$PCo1, positions$PCo2), ],
         aes(x = PCo1, y = PCo2,
             colour = city_name, fill = city_name)) + 
  
  labs(x = paste0("PCo 1 ", "(", round(percentage_explained[1]), "%)"),
       y = paste0("PCo 2 ", "(", round(percentage_explained[2]), "%)"),
       colour = NULL,
       fill = NULL,
       title = "Diurnal frogs in six Amazonian cities",
       subtitle = "Passive acoustic monitoring data") +
  
  scale_colour_brewer(type = "qual", palette = "Set1") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  
  geom_polygon(data = hulls, aes(colour = NULL),
               alpha = 0.2, show.legend = FALSE) +
  
  geom_point(size = 4, shape = 21, colour = "black", alpha = 0.6) +
  
  theme_classic(base_size = 12) +
  theme(axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks = element_line(colour = "black"),
        axis.line = element_line(colour = "black"),
        legend.position = "bottom")

# Visualiza o grafico
gg_pcoa

# Salva o grafico
#ggsave(gg_pcoa, filename = "pcoa.png", dpi = 600,
#       width = 15, height = 15, units = "cm")


# Grafico da ocorrencia das especies nos sitios
# Prepara os dados
# Numero de sitios ocupados por cada especies
sites_occ = data.frame(
  freq = sort(colSums(ifelse(df_ab > 0, 1, 0))))

# Ordena as especies com base no numero de sitios ocupados
sites_occ$species = factor(rownames(sites_occ),
                           levels = rownames(sites_occ))

# Remove o nome das linhas
rownames(sites_occ) = NULL

# Reordena as colunas
sites_occ = sites_occ[, 2:1]

# Produz o grafico
gg_occ = 
  
  ggplot(data = sites_occ,
         aes(x = freq/36 * 100, y = species)) + 
  
  labs(x = "Site occurrence (%)",
       y = NULL,
       title = "Diurnal frogs distribution in 36 sites",
       subtitle = "Passive acoustic monitoring data") +
  
  geom_col(fill = "darkgreen", width = 0.8) + 
  
  theme_minimal(base_size = 12) +
  theme(axis.title.x = element_text(colour = "black"),
        axis.text.x = element_text(colour = "black"),
        axis.text.y = element_text(colour = "black", face = "italic"),
        axis.ticks = element_blank())

# Visualiza o grafico
gg_occ

# Salva o grafico
#ggsave(gg_occ, filename = "occurrence.jpg", dpi = 600,
#       width = 20, height = 15, units = "cm")


# Grafico da frequencia de incidencia por horario do dia para cada especie
# Prepara os dados
freq_hour = as.data.frame(tapply(frogs_validated$occurrence,
                                 list(frogs_validated$hour, frogs_validated$species),
                                 sum))

# Converte NA em zero
freq_hour[is.na(freq_hour)] = 0

# Converte registros em proporcao
freq_hour_prop = as.data.frame(apply(freq_hour, 2, function(x) x/sum(x)) * 100)

for (i in 1:ncol(freq_hour_prop)) {
  
  # Prepara os dados para produzir o grafico (diagrama de rosa)
  dat = data.frame(freq = freq_hour_prop[, i], hour = 0:23)
  
  rosa = 
    
    ggplot(data = dat,
           aes(x = hour, y = freq/sum(freq) * 100)) +
    
    ggtitle(bquote(atop(italic(.(names(freq_hour_prop)[i])),
                        "(n ="~.(paste(sum(freq_hour[, i])))*")"))) +
    
    labs(x = "Time (1-hour block)") +
    
    lims(y = c(0, max(dat$freq))) +
    
    scale_x_continuous(breaks = 0:23) +
    
    geom_bar(stat = "identity") +
    
    geom_rect(aes(xmin = -Inf, xmax = 7, ymin = -Inf, ymax = Inf), fill = "#CFCFDB") + # noite
    geom_rect(aes(xmin = 6, xmax = 18, ymin = -Inf, ymax = Inf), fill = "#FFF6C7") + # dia
    geom_rect(aes(xmin = 18, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "#CFCFDB") + # noite
    
    #geom_rect(aes(xmin = 6, xmax = 8, ymin = -Inf, ymax = Inf), fill = "#FAFBBD") + # dawn
    #geom_rect(aes(xmin = 8, xmax = 18, ymin = -Inf, ymax = Inf), fill = "#FDE050") + # day
    #geom_rect(aes(xmin = 18, xmax = 20, ymin = -Inf, ymax = Inf), fill = "#5995B7") + # dusk
    #geom_rect(aes(xmin = 20, xmax = Inf, ymin = -Inf, ymax = Inf), fill = "#16498A") + # night
    #geom_rect(aes(xmin = -Inf, xmax = 6, ymin = -Inf, ymax = Inf), fill = "#16498A") + # night
    
    geom_vline(xintercept = seq(0, 23, 1),
               colour = "black", linetype = "dashed", size = 0.25, alpha = 0.25) + # "#EBEBEB" cinza
    
    geom_bar(stat = "identity", fill = "black", colour = "white", size = 0.2) +
    
    geom_hline(yintercept = seq(0, 90, 10),
               colour = "black", linetype = "dashed", size = 0.25, alpha = 0.25) +
    
    annotate(geom = "label", x = 12, y = 10, size = 2.25, label = 0.1, fill = "white") +
    annotate(geom = "label", x = 12, y = 20, size = 2.25, label = 0.2, fill = "white") +
    annotate(geom = "label", x = 12, y = 30, size = 2.25, label = 0.3, fill = "white") +
    annotate(geom = "label", x = 12, y = 40, size = 2.25, label = 0.4, fill = "white") +
    annotate(geom = "label", x = 12, y = 50, size = 2.25, label = 0.5, fill = "white") +
    annotate(geom = "label", x = 12, y = 60, size = 2.25, label = 0.6, fill = "white") +
    annotate(geom = "label", x = 12, y = 70, size = 2.25, label = 0.7, fill = "white") +
    annotate(geom = "label", x = 12, y = 80, size = 2.25, label = 0.8, fill = "white") +
    annotate(geom = "label", x = 12, y = 90, size = 2.25, label = 0.9, fill = "white") +
    annotate(geom = "label", x = 12, y = 100, size = 2.25, label = 1.0, fill = "white") +
    
    coord_polar(start = 3.0105, direction = 1) +
    
    theme_minimal() +
    theme(panel.grid = element_blank(),
          plot.title = element_text(hjust = 0.5, face = "bold"),
          axis.title = element_blank(),
          axis.text.x = element_text(colour = "black"),
          axis.text.y = element_blank(),
          legend.position = "bottom")
  
  rosa
  
  #ggsave(rosa, filename = paste0("C:/Users/carla/OneDrive/Documentos/diagrama_rosas_Paulo/", names(freq_hour_prop)[i], ".jpg"),
  #       dpi = 600, h = 15, w = 15, units = "cm")
  
  print(i)
  
}


# Pearson's product-moment correlation between number of species and habitat amount
# across 40 landscape scales
sites_ = sites[, c(9:30)]
sites_ = sites_[-which(is.na(sites_$Richness_observed)), ]

buffer = apply(sites_[, 3:ncol(sites_)], 2, function(z)
  cor.test(z, sites_$Richness_observed))

# Convert the results stored as a 'list' object into a 'matrix' object
buffer = do.call(rbind, lapply(buffer, function(z) z[4]))

# Save the results in a 'data frame' object
buffer = data.frame(buffer = seq(50, 1000, 50), r = as.numeric(buffer))

# Scale of effect: 200-m buffer around mist-net lines
buffer[order(-buffer$r), ][1, ]

plot(buffer[order(-buffer$r), ]$buffer, buffer[order(-buffer$r), ]$r, pch=16, cex=1.2,ylab = "Pearson correlation coefficient", xlab = "Landscape size (m)", main = "Scale of effect")
abline(v = buffer[order(-buffer$r), ][1, ])



###############################
### NESTEDNESS PLOT ###########
### MAXIMALLY PACKED MATRIX ###
###############################

library(reshape2)
library(ggplot2)

# Cria a matriz de incidencia de sitios por especies
x =
  as.data.frame(
    tapply(frogs_validated$occurrence,
           list(frogs_validated$site,
                frogs_validated$species),
           sum))

# Converte NA em zero
x[is.na(x)] = 0

# Rows are sites
# Columns are species
# Sort rows by richness followed by abundance
# Sort columns by incidence followed by abundance
x.sort =
  x[order(-rowSums(ifelse(x > 0, 1, 0)),
          -rowSums(x)),
    order(colSums(ifelse(x > 0, 1, 0)),
          colSums(x))]

# Adiciona uma coluna com o nome dos sitios
x.sort$site = rownames(x.sort)

# Converte a matrix para o formato de tabela longa
x.melt = melt(x.sort)

# Ordena os sitios
x.melt$site = factor(x.melt$site,
                     levels = unique(x.melt$site))

# Converte os valores de abundancia em incidencia
x.melt$incidence = ifelse(x.melt$value > 0, 1, 0)

# Produz o grafico
p = 
  
  ggplot(data = x.melt,
         aes(x = site, y = variable, fill = incidence)) +
  
  #labs(x = "Sites by species richness",
  #     y = "Species by site incidence") +
  labs(x = NULL,
       y = NULL,
       title = "Maximally packed matrix for diurnal frogs") +
  
  geom_tile(color = "white",
            linewidth = 0.5,
            linetype = 1) +
  
  scale_fill_gradient(low = "grey90", high = "#006400") +
  
  theme_classic(base_size = 10) +
  theme(axis.line = element_blank(),
        axis.ticks = element_blank(),
        axis.text.x = element_text(colour = "black",
                                   angle = 90,
                                   hjust = 1,
                                   vjust = 0.5,
                                   size = 6),
        axis.text.y = element_text(colour = "black",
                                   face = "italic",
                                   size = 7),
        legend.position = "none",
        plot.title = element_text(hjust = 0.5))

# Visualiza o gráfico
p

# Salva o gráfico
ggsave(p, filename = "nested_frogs.pdf",
       width = 183, height = 89, units = "mm")
